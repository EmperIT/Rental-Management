// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.20.3
// source: proto/contract.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "contract";

export interface CreateContractDto {
  roomId: string;
  tenantId: string;
  content: string;
  startDate: string;
  endDate: string;
}

export interface PaginationDto {
  page: number;
  limit: number;
  roomId?: string | undefined;
  tenantId?: string | undefined;
  isActive?: boolean | undefined;
}

export interface FindOneContractDto {
  contractId: string;
}

export interface UpdateContractDto {
  contractId: string;
  isActive: boolean;
  roomId: string;
  tenantId: string;
  content: string;
  startDate: string;
  endDate: string;
}

export interface Contract {
  contractId: string;
  isActive: boolean;
  roomId: string;
  tenantId: string;
  content: string;
  createdAt: string;
  updatedAt: string;
  startDate: string;
  endDate: string;
}

export interface Contracts {
  contracts: Contract[];
  total: number;
}

/** Stay Record messages */
export interface CreateStayRecordDto {
  tenantId: string;
  startDate: string;
  endDate: string;
  content: string;
  createdBy: string;
}

export interface StayRecordPaginationDto {
  page: number;
  limit: number;
  tenantId?:
    | string
    | undefined;
  /** active, expired, inactive */
  status?: string | undefined;
  startDateFrom?: string | undefined;
  startDateTo?: string | undefined;
  endDateFrom?: string | undefined;
  endDateTo?: string | undefined;
}

export interface FindOneStayRecordDto {
  stayId: string;
}

export interface UpdateStayRecordDto {
  stayId: string;
  tenantId: string;
  startDate: string;
  endDate: string;
  status: string;
  content: string;
}

export interface RemoveStayRecordDto {
  stayId: string;
}

export interface StayRecord {
  stayId: string;
  tenantId: string;
  startDate: string;
  endDate: string;
  status: string;
  content: string;
  createdBy: string;
  createdAt: string;
  updatedAt: string;
}

export interface StayRecords {
  records: StayRecord[];
  total: number;
}

export const CONTRACT_PACKAGE_NAME = "contract";

export interface ContractServiceClient {
  createContract(request: CreateContractDto): Observable<Contract>;

  findAllContracts(request: PaginationDto): Observable<Contracts>;

  findOneContract(request: FindOneContractDto): Observable<Contract>;

  updateContract(request: UpdateContractDto): Observable<Contract>;

  removeContract(request: FindOneContractDto): Observable<Contract>;

  /** Stay Record services */

  createStayRecord(request: CreateStayRecordDto): Observable<StayRecord>;

  findAllStayRecords(request: StayRecordPaginationDto): Observable<StayRecords>;

  findOneStayRecord(request: FindOneStayRecordDto): Observable<StayRecord>;

  updateStayRecord(request: UpdateStayRecordDto): Observable<StayRecord>;

  removeStayRecord(request: RemoveStayRecordDto): Observable<StayRecord>;
}

export interface ContractServiceController {
  createContract(request: CreateContractDto): Promise<Contract> | Observable<Contract> | Contract;

  findAllContracts(request: PaginationDto): Promise<Contracts> | Observable<Contracts> | Contracts;

  findOneContract(request: FindOneContractDto): Promise<Contract> | Observable<Contract> | Contract;

  updateContract(request: UpdateContractDto): Promise<Contract> | Observable<Contract> | Contract;

  removeContract(request: FindOneContractDto): Promise<Contract> | Observable<Contract> | Contract;

  /** Stay Record services */

  createStayRecord(request: CreateStayRecordDto): Promise<StayRecord> | Observable<StayRecord> | StayRecord;

  findAllStayRecords(request: StayRecordPaginationDto): Promise<StayRecords> | Observable<StayRecords> | StayRecords;

  findOneStayRecord(request: FindOneStayRecordDto): Promise<StayRecord> | Observable<StayRecord> | StayRecord;

  updateStayRecord(request: UpdateStayRecordDto): Promise<StayRecord> | Observable<StayRecord> | StayRecord;

  removeStayRecord(request: RemoveStayRecordDto): Promise<StayRecord> | Observable<StayRecord> | StayRecord;
}

export function ContractServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "createContract",
      "findAllContracts",
      "findOneContract",
      "updateContract",
      "removeContract",
      "createStayRecord",
      "findAllStayRecords",
      "findOneStayRecord",
      "updateStayRecord",
      "removeStayRecord",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("ContractService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("ContractService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const CONTRACT_SERVICE_NAME = "ContractService";

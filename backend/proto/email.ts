// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.20.3
// source: proto/email.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "email";

/** Common response for all email sending operations */
export interface EmailResponse {
  success: boolean;
  messageId: string;
  previewUrl: string;
}

/** Fee for invoice email */
export interface FeeDto {
  type: string;
  amount: number;
  description: string;
}

/** Invoice Email Message */
export interface SendInvoiceEmailDto {
  to: string;
  tenantName: string;
  roomNumber: string;
  month: string;
  dueDate: string;
  total: number;
  fees: FeeDto[];
}

/** Verification Email Message */
export interface SendVerificationEmailDto {
  to: string;
  username: string;
  verificationLink: string;
  expiresIn: string;
}

/** Password Reset Email Message */
export interface SendPasswordResetEmailDto {
  to: string;
  username: string;
  resetLink: string;
  expiresIn: string;
}

/** Notification Email Message */
export interface SendNotificationEmailDto {
  to: string;
  username: string;
  message: string;
  actionLink: string;
  actionText: string;
}

export const EMAIL_PACKAGE_NAME = "email";

export interface EmailServiceClient {
  /** Email sending operations */

  sendInvoiceEmail(request: SendInvoiceEmailDto): Observable<EmailResponse>;

  sendVerificationEmail(request: SendVerificationEmailDto): Observable<EmailResponse>;

  sendPasswordResetEmail(request: SendPasswordResetEmailDto): Observable<EmailResponse>;

  sendNotificationEmail(request: SendNotificationEmailDto): Observable<EmailResponse>;
}

export interface EmailServiceController {
  /** Email sending operations */

  sendInvoiceEmail(request: SendInvoiceEmailDto): Promise<EmailResponse> | Observable<EmailResponse> | EmailResponse;

  sendVerificationEmail(
    request: SendVerificationEmailDto,
  ): Promise<EmailResponse> | Observable<EmailResponse> | EmailResponse;

  sendPasswordResetEmail(
    request: SendPasswordResetEmailDto,
  ): Promise<EmailResponse> | Observable<EmailResponse> | EmailResponse;

  sendNotificationEmail(
    request: SendNotificationEmailDto,
  ): Promise<EmailResponse> | Observable<EmailResponse> | EmailResponse;
}

export function EmailServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "sendInvoiceEmail",
      "sendVerificationEmail",
      "sendPasswordResetEmail",
      "sendNotificationEmail",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("EmailService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("EmailService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const EMAIL_SERVICE_NAME = "EmailService";

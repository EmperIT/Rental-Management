// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.20.3
// source: proto/rental.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "rental";

/** Empty message for requests with no parameters */
export interface Empty {
}

/** Services Messages */
export interface GetServiceRequest {
  name: string;
}

export interface SaveServiceRequest {
  name: string;
  value: string;
  description?: string | undefined;
  type?: string | undefined;
  unit?: string | undefined;
}

export interface ServiceResponse {
  name: string;
  value: string;
  description: string;
  type: string;
  unit: string;
}

export interface AllServicesResponse {
  services: ServiceResponse[];
}

/** Room Service Messages */
export interface ServiceDetails {
  name: string;
  value: string;
  description: string;
  type: string;
  unit: string;
}

export interface AddRoomServiceRequest {
  roomId: string;
  serviceName: string;
  quantity: number;
  customPrice?: number | undefined;
}

export interface GetRoomServicesRequest {
  roomId: string;
}

export interface UpdateRoomServiceRequest {
  id: string;
  roomId: string;
  serviceName: string;
  quantity: number;
  customPrice: number;
  isActive: boolean;
}

export interface RemoveRoomServiceRequest {
  roomId: string;
  serviceName: string;
}

export interface RoomServiceResponse {
  id: string;
  roomId: string;
  service: ServiceDetails | undefined;
  quantity: number;
  customPrice: number;
  isActive: boolean;
  createdAt: string;
  updatedAt: string;
}

export interface RoomServicesResponse {
  services: RoomServiceResponse[];
}

export interface InvoiceGenerationResponse {
  success: boolean;
  message: string;
}

/** Room Messages */
export interface CreateRoomDto {
  roomNumber: string;
  price: number;
  area: number;
  images: string[];
  depositDate: string;
  depositPrice: number;
  maxTenants: number;
}

export interface UpdateRoomDto {
  id: string;
  roomNumber: string;
  price: number;
  area: number;
  images: string[];
  depositDate: string;
  depositPrice: number;
  maxTenants: number;
  isEmpty: boolean;
}

export interface FindAllRoomsByFilterDto {
  page: number;
  limit: number;
  isEmpty?: boolean | undefined;
}

export interface FindOneRoomDto {
  id: string;
}

export interface Room {
  id: string;
  roomNumber: string;
  price: number;
  area: number;
  images: string[];
  depositDate: string;
  depositPrice: number;
  maxTenants: number;
  isEmpty: boolean;
  createdAt: string;
  updatedAt: string;
}

export interface Rooms {
  rooms: Room[];
  total: number;
}

/** Tenant Messages */
export interface CreateTenantDto {
  name: string;
  email: string;
  phone: string;
  roomId: string;
  isLeadRoom: boolean;
  identityNumber: string;
  permanentAddress: string;
  startDate: string;
  holdingDepositPrice: number;
  depositDate: string;
}

export interface UpdateTenantDto {
  id: string;
  name: string;
  email: string;
  phone: string;
  roomId: string;
  isLeadRoom: boolean;
  identityNumber: string;
  permanentAddress: string;
  startDate: string;
  holdingDepositPrice: number;
  depositDate: string;
  isActive: boolean;
}

export interface FindOneTenantDto {
  id: string;
}

export interface FindAllTenantsByFilterDto {
  roomId?: string | undefined;
  isLeadRoom?: boolean | undefined;
  page: number;
  limit: number;
}

export interface Tenant {
  id: string;
  name: string;
  email: string;
  phone: string;
  roomId: string;
  isLeadRoom: boolean;
  identityNumber: string;
  permanentAddress: string;
  startDate: string;
  holdingDepositPrice: number;
  depositDate: string;
  isActive: boolean;
  createdAt: string;
  updatedAt: string;
}

export interface Tenants {
  tenants: Tenant[];
  total: number;
}

/** Fee Message */
export interface Fee {
  type: string;
  amount: number;
  reading: number;
  description: string;
  createdAt: string;
  updatedAt: string;
}

/** Invoice Messages */
export interface CreateInvoiceDto {
  roomId: string;
  month: string;
  fees: Fee[];
  total: number;
  dueDate: string;
}

export interface UpdateInvoiceDto {
  id: string;
  roomId: string;
  month: string;
  fees: Fee[];
  total: number;
  dueDate: string;
  isPaid: boolean;
}

export interface FindOneInvoiceDto {
  id: string;
}

export interface FindAllInvoicesByFilterDto {
  page: number;
  limit: number;
  isPaid?: boolean | undefined;
  roomId?: string | undefined;
  month?: string | undefined;
}

export interface Invoice {
  id: string;
  roomId: string;
  month: string;
  fees: Fee[];
  total: number;
  dueDate: string;
  isPaid: boolean;
  paidAt: string;
  createdAt: string;
  updatedAt: string;
}

export interface Invoices {
  invoices: Invoice[];
  total: number;
}

/** Readings Messages */
export interface FindLatestReadingsDto {
  roomId: string;
}

export interface ReadingsResponse {
  readings: { [key: string]: number };
}

export interface ReadingsResponse_ReadingsEntry {
  key: string;
  value: number;
}

/** Asset Messages */
export interface CreateAssetDto {
  name: string;
  value: number;
  unit?: string | undefined;
}

export interface UpdateAssetDto {
  name: string;
  value: number;
  unit?: string | undefined;
}

export interface GetAssetRequest {
  name: string;
}

export interface Asset {
  name: string;
  value: number;
  unit: string;
  createdAt: string;
  updatedAt: string;
}

export interface AssetsResponse {
  assets: Asset[];
  total: number;
}

/** Room Asset Messages */
export interface AddRoomAssetRequest {
  roomId: string;
  assetName: string;
  quantity: number;
  customPrice?: number | undefined;
}

export interface GetRoomAssetsRequest {
  roomId: string;
}

export interface UpdateRoomAssetRequest {
  id: string;
  roomId: string;
  assetName: string;
  quantity: number;
  customPrice: number;
  isActive: boolean;
}

export interface RemoveRoomAssetRequest {
  roomId: string;
  assetName: string;
}

export interface RoomAssetResponse {
  id: string;
  roomId: string;
  assetName: string;
  quantity: number;
  customPrice: number;
  isActive: boolean;
  createdAt: string;
  updatedAt: string;
}

export interface RoomAssetsResponse {
  assets: RoomAssetResponse[];
  total: number;
}

/** Transaction Messages */
export interface CreateTransactionDto {
  /** 'income' hoặc 'expense' */
  category: string;
  type: string;
  amount: number;
  description?:
    | string
    | undefined;
  /** Reference đến Invoice */
  relatedTo?:
    | string
    | undefined;
  /** Reference đến Auth */
  createdBy?: string | undefined;
}

export interface UpdateTransactionDto {
  id: string;
  category: string;
  type: string;
  amount: number;
  description?: string | undefined;
  relatedTo?: string | undefined;
  createdBy?: string | undefined;
}

export interface FindOneTransactionDto {
  id: string;
}

export interface FindAllTransactionsByFilterDto {
  page: number;
  limit: number;
  category?: string | undefined;
  type?: string | undefined;
  startDate?: string | undefined;
  endDate?: string | undefined;
}

export interface Transaction {
  id: string;
  category: string;
  type: string;
  amount: number;
  description: string;
  relatedTo: string;
  createdBy: string;
  createdAt: string;
  updatedAt: string;
}

export interface Transactions {
  transactions: Transaction[];
  total: number;
}

export const RENTAL_PACKAGE_NAME = "rental";

export interface RentalServiceClient {
  /** Room */

  createRoom(request: CreateRoomDto): Observable<Room>;

  findAllRoomsByFilter(request: FindAllRoomsByFilterDto): Observable<Rooms>;

  findOneRoom(request: FindOneRoomDto): Observable<Room>;

  updateRoom(request: UpdateRoomDto): Observable<Room>;

  removeRoom(request: FindOneRoomDto): Observable<Room>;

  /** Tenant */

  createTenant(request: CreateTenantDto): Observable<Tenant>;

  findAllTenantsByFilter(request: FindAllTenantsByFilterDto): Observable<Tenants>;

  findOneTenant(request: FindOneTenantDto): Observable<Tenant>;

  updateTenant(request: UpdateTenantDto): Observable<Tenant>;

  removeTenant(request: FindOneTenantDto): Observable<Tenant>;

  /** Invoice */

  createInvoice(request: CreateInvoiceDto): Observable<Invoice>;

  findAllInvoicesByFilter(request: FindAllInvoicesByFilterDto): Observable<Invoices>;

  findOneInvoice(request: FindOneInvoiceDto): Observable<Invoice>;

  updateInvoice(request: UpdateInvoiceDto): Observable<Invoice>;

  removeInvoice(request: FindOneInvoiceDto): Observable<Invoice>;

  /** Readings */

  findLatestReadings(request: FindLatestReadingsDto): Observable<ReadingsResponse>;

  /** Services Management */

  getService(request: GetServiceRequest): Observable<ServiceResponse>;

  saveService(request: SaveServiceRequest): Observable<ServiceResponse>;

  getAllServices(request: Empty): Observable<AllServicesResponse>;

  removeService(request: GetServiceRequest): Observable<ServiceResponse>;

  /** Room Services Management */

  addRoomService(request: AddRoomServiceRequest): Observable<RoomServiceResponse>;

  getRoomServices(request: GetRoomServicesRequest): Observable<RoomServicesResponse>;

  updateRoomService(request: UpdateRoomServiceRequest): Observable<RoomServicesResponse>;

  removeRoomService(request: RemoveRoomServiceRequest): Observable<RoomServiceResponse>;

  /** Invoice Generation */

  triggerInvoiceGeneration(request: Empty): Observable<InvoiceGenerationResponse>;

  /** Asset Management */

  createAsset(request: CreateAssetDto): Observable<Asset>;

  getAsset(request: GetAssetRequest): Observable<Asset>;

  getAllAssets(request: Empty): Observable<AssetsResponse>;

  updateAsset(request: UpdateAssetDto): Observable<Asset>;

  removeAsset(request: GetAssetRequest): Observable<Asset>;

  /** Room Asset Management */

  addRoomAsset(request: AddRoomAssetRequest): Observable<RoomAssetResponse>;

  getRoomAssets(request: GetRoomAssetsRequest): Observable<RoomAssetsResponse>;

  updateRoomAsset(request: UpdateRoomAssetRequest): Observable<RoomAssetResponse>;

  removeRoomAsset(request: RemoveRoomAssetRequest): Observable<RoomAssetResponse>;

  /** Transaction Management */

  createTransaction(request: CreateTransactionDto): Observable<Transaction>;

  findAllTransactionsByFilter(request: FindAllTransactionsByFilterDto): Observable<Transactions>;

  findOneTransaction(request: FindOneTransactionDto): Observable<Transaction>;

  updateTransaction(request: UpdateTransactionDto): Observable<Transaction>;

  removeTransaction(request: FindOneTransactionDto): Observable<Transaction>;
}

export interface RentalServiceController {
  /** Room */

  createRoom(request: CreateRoomDto): Promise<Room> | Observable<Room> | Room;

  findAllRoomsByFilter(request: FindAllRoomsByFilterDto): Promise<Rooms> | Observable<Rooms> | Rooms;

  findOneRoom(request: FindOneRoomDto): Promise<Room> | Observable<Room> | Room;

  updateRoom(request: UpdateRoomDto): Promise<Room> | Observable<Room> | Room;

  removeRoom(request: FindOneRoomDto): Promise<Room> | Observable<Room> | Room;

  /** Tenant */

  createTenant(request: CreateTenantDto): Promise<Tenant> | Observable<Tenant> | Tenant;

  findAllTenantsByFilter(request: FindAllTenantsByFilterDto): Promise<Tenants> | Observable<Tenants> | Tenants;

  findOneTenant(request: FindOneTenantDto): Promise<Tenant> | Observable<Tenant> | Tenant;

  updateTenant(request: UpdateTenantDto): Promise<Tenant> | Observable<Tenant> | Tenant;

  removeTenant(request: FindOneTenantDto): Promise<Tenant> | Observable<Tenant> | Tenant;

  /** Invoice */

  createInvoice(request: CreateInvoiceDto): Promise<Invoice> | Observable<Invoice> | Invoice;

  findAllInvoicesByFilter(request: FindAllInvoicesByFilterDto): Promise<Invoices> | Observable<Invoices> | Invoices;

  findOneInvoice(request: FindOneInvoiceDto): Promise<Invoice> | Observable<Invoice> | Invoice;

  updateInvoice(request: UpdateInvoiceDto): Promise<Invoice> | Observable<Invoice> | Invoice;

  removeInvoice(request: FindOneInvoiceDto): Promise<Invoice> | Observable<Invoice> | Invoice;

  /** Readings */

  findLatestReadings(
    request: FindLatestReadingsDto,
  ): Promise<ReadingsResponse> | Observable<ReadingsResponse> | ReadingsResponse;

  /** Services Management */

  getService(request: GetServiceRequest): Promise<ServiceResponse> | Observable<ServiceResponse> | ServiceResponse;

  saveService(request: SaveServiceRequest): Promise<ServiceResponse> | Observable<ServiceResponse> | ServiceResponse;

  getAllServices(request: Empty): Promise<AllServicesResponse> | Observable<AllServicesResponse> | AllServicesResponse;

  removeService(request: GetServiceRequest): Promise<ServiceResponse> | Observable<ServiceResponse> | ServiceResponse;

  /** Room Services Management */

  addRoomService(
    request: AddRoomServiceRequest,
  ): Promise<RoomServiceResponse> | Observable<RoomServiceResponse> | RoomServiceResponse;

  getRoomServices(
    request: GetRoomServicesRequest,
  ): Promise<RoomServicesResponse> | Observable<RoomServicesResponse> | RoomServicesResponse;

  updateRoomService(
    request: UpdateRoomServiceRequest,
  ): Promise<RoomServicesResponse> | Observable<RoomServicesResponse> | RoomServicesResponse;

  removeRoomService(
    request: RemoveRoomServiceRequest,
  ): Promise<RoomServiceResponse> | Observable<RoomServiceResponse> | RoomServiceResponse;

  /** Invoice Generation */

  triggerInvoiceGeneration(
    request: Empty,
  ): Promise<InvoiceGenerationResponse> | Observable<InvoiceGenerationResponse> | InvoiceGenerationResponse;

  /** Asset Management */

  createAsset(request: CreateAssetDto): Promise<Asset> | Observable<Asset> | Asset;

  getAsset(request: GetAssetRequest): Promise<Asset> | Observable<Asset> | Asset;

  getAllAssets(request: Empty): Promise<AssetsResponse> | Observable<AssetsResponse> | AssetsResponse;

  updateAsset(request: UpdateAssetDto): Promise<Asset> | Observable<Asset> | Asset;

  removeAsset(request: GetAssetRequest): Promise<Asset> | Observable<Asset> | Asset;

  /** Room Asset Management */

  addRoomAsset(
    request: AddRoomAssetRequest,
  ): Promise<RoomAssetResponse> | Observable<RoomAssetResponse> | RoomAssetResponse;

  getRoomAssets(
    request: GetRoomAssetsRequest,
  ): Promise<RoomAssetsResponse> | Observable<RoomAssetsResponse> | RoomAssetsResponse;

  updateRoomAsset(
    request: UpdateRoomAssetRequest,
  ): Promise<RoomAssetResponse> | Observable<RoomAssetResponse> | RoomAssetResponse;

  removeRoomAsset(
    request: RemoveRoomAssetRequest,
  ): Promise<RoomAssetResponse> | Observable<RoomAssetResponse> | RoomAssetResponse;

  /** Transaction Management */

  createTransaction(request: CreateTransactionDto): Promise<Transaction> | Observable<Transaction> | Transaction;

  findAllTransactionsByFilter(
    request: FindAllTransactionsByFilterDto,
  ): Promise<Transactions> | Observable<Transactions> | Transactions;

  findOneTransaction(request: FindOneTransactionDto): Promise<Transaction> | Observable<Transaction> | Transaction;

  updateTransaction(request: UpdateTransactionDto): Promise<Transaction> | Observable<Transaction> | Transaction;

  removeTransaction(request: FindOneTransactionDto): Promise<Transaction> | Observable<Transaction> | Transaction;
}

export function RentalServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "createRoom",
      "findAllRoomsByFilter",
      "findOneRoom",
      "updateRoom",
      "removeRoom",
      "createTenant",
      "findAllTenantsByFilter",
      "findOneTenant",
      "updateTenant",
      "removeTenant",
      "createInvoice",
      "findAllInvoicesByFilter",
      "findOneInvoice",
      "updateInvoice",
      "removeInvoice",
      "findLatestReadings",
      "getService",
      "saveService",
      "getAllServices",
      "removeService",
      "addRoomService",
      "getRoomServices",
      "updateRoomService",
      "removeRoomService",
      "triggerInvoiceGeneration",
      "createAsset",
      "getAsset",
      "getAllAssets",
      "updateAsset",
      "removeAsset",
      "addRoomAsset",
      "getRoomAssets",
      "updateRoomAsset",
      "removeRoomAsset",
      "createTransaction",
      "findAllTransactionsByFilter",
      "findOneTransaction",
      "updateTransaction",
      "removeTransaction",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("RentalService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("RentalService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const RENTAL_SERVICE_NAME = "RentalService";
